// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  coachId            String? @db.ObjectId @map("coach_id")  // Nullable coach foreign key (references coach ID)
  studentId          String? @db.ObjectId @map("student_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  coach   Coach?   @relation(fields: [coachId], references: [id], onDelete: Cascade) // Nullable relation to Coach
  student Student? @relation(fields: [studentId], references: [id], onDelete: Cascade) // Nullable relation to Student
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Coach {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  username      String?          @unique  // Coach's username
  name          String?
  email         String?          @unique
  emailVerified DateTime?        @map("email_verified")
  image         String?
  password      String?
  clients       Student[]        @relation("CoachClients") // One-to-many relation to students
  subscription  SubscriptionTier @default(FREE)
  accounts      Account[]        // One-to-many relation with Account
  homework      Homework[]
  role          UserRole           @default(COACH)
  @@map("coaches")
}

model Student {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  username      String?          @unique
  name          String?
  email         String?          @unique
  emailVerified DateTime?        @map("email_verified")
  image         String?
  password      String?
  coachUsername String?          @map("coach_username") // Field to store the coach's username
  coach         Coach?           @relation("CoachClients", fields: [coachUsername], references: [username])
  iRacingID     String
  accounts      Account[]
  role          UserRole         @default(STUDENT)

  @@map("students")
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String  @unique
  expires   DateTime @map("expires_at")

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String  @unique
  expires   DateTime @map("expires_at")

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model Homework {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String    // Title of the homework
  description   String    // Description of the homework
  coachId       String    @db.ObjectId // Foreign key linking to Coach
  coach         Coach     @relation(fields: [coachId], references: [id], onDelete: Cascade) // Relation to Coach
  createdAt     DateTime  @default(now()) // Timestamp for when the homework was created
  updatedAt     DateTime  @updatedAt // Timestamp for when the homework was last updated
}

enum SubscriptionTier {
  FREE
  BASIC
  PRO
}
enum UserRole {
  COACH
  STUDENT
}